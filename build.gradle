/*
 * Copyright 2010-2011 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import org.springframework.build.Version

// -----------------------------------------------------------------------------
// Main gradle build file for Spring Mobile
// @author Chris Beams
// @author Roy Clarkson
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// Configuration for the root project
// -----------------------------------------------------------------------------
description = 'Spring Android'
abbreviation = 'ANDROID'

apply plugin: 'base'
apply plugin: 'idea'

def buildSrcDir = "$rootDir/buildSrc"
apply from: "$buildSrcDir/wrapper.gradle"
apply from: "$buildSrcDir/maven-root-pom.gradle"

// -----------------------------------------------------------------------------
// Configuration for all projects including this one (the root project)
// @see settings.gradle for list of all projects
// -----------------------------------------------------------------------------
allprojects {
    // group will translate to groupId during pom generation and deployment
    group = 'org.springframework.android'

    // version will be used in maven pom generation as well as determining
    // where artifacts should be deployed, based on release type of snapshot,
    // milestone or release.
    // @see org.springframework.build.Version under buildSrc/ for more info
    // @see gradle.properties for the declaration of this property.
    version = new Version(springAndroidVersion)

    // default set of maven repositories to be used when resolving dependencies
    repositories {
        mavenRepo urls: 'http://maven.springframework.org/release'
        mavenRepo urls: 'http://maven.springframework.org/milestone'
        mavenRepo urls: 'http://maven.springframework.org/snapshot'
        mavenCentral()
    }
}


// -----------------------------------------------------------------------------
// Create collection of subprojects - each will receive their own configuration
// - all subprojects that start with spring-mobile-* are 'java projects'
// - documentation-related projects are not collected here
//
// @see configure(*) sections below
// -----------------------------------------------------------------------------
javaprojects = subprojects.findAll { project ->
    project.path.startsWith(':spring-android-')
}


// -----------------------------------------------------------------------------
// Configuration for all java projects
// -----------------------------------------------------------------------------
configure(javaprojects) {

    apply plugin: 'java'     // tasks for conventional java lifecycle
    apply plugin: 'maven'    // `gradle install` to push jars to local .m2 cache
    apply plugin: 'eclipse'  // `gradle eclipse` to generate .classpath/.project
    apply plugin: 'idea'     // `gradle idea` to generate .ipr/.iml

    // ensure JDK 5 compatibility
    sourceCompatibility=1.5
    targetCompatibility=1.5

    // set up dedicated directories for jars and source jars.
    // this makes it easier when putting together the distribution
    libsBinDir = new File(libsDir, 'bin')
    libsSrcDir = new File(libsDir, 'src')

    // add tasks for creating source jars and generating poms etc
    apply from: "$buildSrcDir/maven-deployment.gradle"

    // add tasks for finding and publishing .xsd files
    apply from: "$buildSrcDir/schema-publication.gradle"

    junitVersion = '4.7'
    log4jVersion = '1.2.16'
    springVersion = '3.1.0.M1'
    springSocialVersion = '1.0.0.M3'
    springSecurityVersion = '3.1.0.RC1'
    androidVersion = '1.5_r3'
    commonsHttpclientVersion = '3.1'
    androidRomeVersion = '1.0.0-r2'
    simpleXmlVersion = '2.4.1'
    javaxServletApiVersion = '2.5'
    commonsFileuploadVersion = '1.2'
    jettyVersion = '6.1.9'
    jacksonVersion = '1.4.2'
    xmlUnitVersion = '1.3'
    
    // dependencies that are common across all java projects
    dependencies {
        testCompile "junit:junit:$junitVersion"
        testCompile "log4j:log4j:$log4jVersion"
        testCompile "org.springframework:spring-test:$springVersion"
    }

    // enable all compiler warnings (GRADLE-1077)
    [compileJava, compileTestJava]*.options*.compilerArgs = ['-Xlint:all']

    // generate .classpath files without GRADLE_CACHE variable (GRADLE-1079)
    eclipseClasspath.variables = [:]
}


// -----------------------------------------------------------------------------
// Configuration for each individual core java subproject
//
// @see configure(javaprojects) above for general config
// -----------------------------------------------------------------------------
project('spring-android-core') {
    description = "Spring Android Core"
    
    mainSrcDir = "$projectDir/src/main/java"
    mainResourcesDir = "$projectDir/src/main/resources"
    sharedSrcDir = "$projectDir/src/shared/java"
    sharedResourcesDir = "$projectDir/src/shared/resources"
    
    // include the shared source directories in the main SourceSet
	sourceSets.main.java.srcDirs = [mainSrcDir, sharedSrcDir]
	sourceSets.main.resources.srcDirs = [mainResourcesDir, sharedResourcesDir]
	
	// delete the shared source files when cleaning the project
    clean.doFirst {
        delete files(sharedSrcDir)
    }

    // configuration for extracting required source files from springframework
    configurations { explodedSourceFiles }
    dependencies {
        explodedSourceFiles "org.springframework:spring-beans:$springVersion:sources"
        explodedSourceFiles "org.springframework:spring-core:$springVersion:sources"
    }

    compileJava.doFirst {
        sourceFilter = [
            // spring-beans
            'org/springframework/beans/BeansException.java',
            'org/springframework/beans/PropertyAccessException.java',
            'org/springframework/beans/TypeMismatchException.java',
            'org/springframework/beans/factory/DisposableBean.java',        
            // spring-core
            'org/springframework/core/ErrorCoded.java',
            'org/springframework/core/GenericTypeResolver.java',
            'org/springframework/core/MethodParameter.java',
            'org/springframework/core/ParameterNameDiscoverer.java',
            'org/springframework/core/NestedExceptionUtils.java',
            'org/springframework/core/NestedCheckedException.java',
            'org/springframework/core/NestedIOException.java',
            'org/springframework/core/NestedRuntimeException.java',
            'org/springframework/core/io/AbstractResource.java',
            'org/springframework/core/io/ByteArrayResource.java',
            'org/springframework/core/io/ClassPathResource.java',
            'org/springframework/core/io/FileSystemResource.java',
            'org/springframework/core/io/InputStreamResource.java',
            'org/springframework/core/io/InputStreamSource.java',
            'org/springframework/core/io/Resource.java',
            'org/springframework/core/io/UrlResource.java',
            'org/springframework/util/Assert.java',
            'org/springframework/util/CollectionUtils.java',
            'org/springframework/util/FileCopyUtils.java',
            'org/springframework/util/LinkedCaseInsensitiveMap.java',
            'org/springframework/util/LinkedMultiValueMap.java',
            'org/springframework/util/MultiValueMap.java',
            'org/springframework/util/NumberUtils.java',
            'org/springframework/util/ObjectUtils.java',
            'org/springframework/util/ReflectionUtils.java',
            'org/springframework/util/ResourceUtils.java',
            'org/springframework/util/StringUtils.java',
            'org/springframework/util/TypeUtils.java',
            ]

        // loops through springframework jars, extracting and copying class files to the sharedSrcDir folder
        FileCollection sourceJars = configurations.explodedSourceFiles
        sourceJars.each { sourceJar ->
            zipTree(sourceJar).visit { sourceFile ->
                if (sourceFile.relativePath.toString() in sourceFilter) {
                    filePath = sourceFile.relativePath.getPathString().minus(sourceFile.name)
                    copy {
                        from sourceFile.file
                        into sharedSrcDir + '/' + filePath
                    }
                }
            }
        }
    }
}

project('spring-android-auth') {
    description = 'Spring Android Auth'
    
    dependencies {
        compile ("com.google.android:android:$androidVersion") { 
            provided = true 
        }
        compile ("org.springframework.social:spring-social-core:$springSocialVersion") {
            // exclude spring-web in favor of spring-android-rest-template
            exclude group: "org.springframework", module: "spring-web"
        }
        compile ("org.springframework.security:spring-security-crypto:$springSecurityVersion") {
            // exclude spring-core in favor of spring-android-core
            exclude group: "org.springframework", module: "spring-core"
        }
        compile project (':spring-android-core')
        compile project (':spring-android-rest-template');
    }
}

project('spring-android-rest-template') {
    description = 'Spring Android Rest Template'
    
    mainSrcDir = "$projectDir/src/main/java"
    mainResourcesDir = "$projectDir/src/main/resources"
    sharedSrcDir = "$projectDir/src/shared/java"
    sharedResourcesDir = "$projectDir/src/shared/resources"

    // include the shared source directories in the main SourceSet
    sourceSets.main.java.srcDirs = [mainSrcDir, sharedSrcDir]
    sourceSets.main.resources.srcDirs = [mainResourcesDir, sharedResourcesDir]

    repositories {
        mavenRepo urls: 'https://android-rome-feed-reader.googlecode.com/svn/maven2/releases'
    }
    
    dependencies {
        compile ("com.google.android:android:$androidVersion") { 
            provided = true 
        }
        compile ("org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion") {
            optional = true
        }
        compile ("com.google.code.android-rome-feed-reader:android-rome-feed-reader:$androidRomeVersion") { 
            optional = true 
        }
        compile ("org.simpleframework:simple-xml:$simpleXmlVersion") { 
            optional = true 
            transitive = false 
        }
        compile ("commons-httpclient:commons-httpclient:$commonsHttpclientVersion") {
            optional = true
            transitive = false
        }
        compile project (':spring-android-core')

        testCompile "org.springframework:spring-core:$springVersion"
        testCompile "javax.servlet:servlet-api:$javaxServletApiVersion"
        testCompile "commons-fileupload:commons-fileupload:$commonsFileuploadVersion"
        testCompile "org.mortbay.jetty:jetty:$jettyVersion"
        testCompile "xmlunit:xmlunit:$xmlUnitVersion"
    }

    // delete the shared source files when cleaning the project
    clean.doFirst {
        delete files(sharedSrcDir)
    }

    // configuration for extracting required source files from springframework
    configurations { explodedSourceFiles }
    dependencies {
        explodedSourceFiles "org.springframework:spring-web:$springVersion:sources"
    }

    compileJava.doFirst {
        // Required springframework source files for RestTemplate support
        sourceFilter = [
            // spring-web
            'org/springframework/http/HttpEntity.java',
            'org/springframework/http/HttpHeaders.java',
            'org/springframework/http/HttpInputMessage.java',
            'org/springframework/http/HttpMessage.java',
            'org/springframework/http/HttpMethod.java',
            'org/springframework/http/HttpOutputMessage.java',
            'org/springframework/http/HttpRequest.java',
            'org/springframework/http/HttpStatus.java',
            'org/springframework/http/ResponseEntity.java',
            'org/springframework/http/client/AbstractBufferingClientHttpRequest.java',
            'org/springframework/http/client/AbstractClientHttpRequest.java',
            'org/springframework/http/client/BufferingSimpleClientHttpRequest.java',            
            'org/springframework/http/client/ClientHttpRequest.java',
            'org/springframework/http/client/ClientHttpRequestExecution.java',
            'org/springframework/http/client/ClientHttpRequestFactory.java',
            'org/springframework/http/client/ClientHttpRequestInterceptor.java',
            'org/springframework/http/client/ClientHttpResponse.java',
            'org/springframework/http/client/CommonsClientHttpRequest.java',
            'org/springframework/http/client/CommonsClientHttpRequestFactory.java',
            'org/springframework/http/client/CommonsClientHttpResponse.java',
            'org/springframework/http/client/InterceptingClientHttpRequest.java',
            'org/springframework/http/client/InterceptingClientHttpRequestFactory.java',
            'org/springframework/http/client/SimpleClientHttpRequestFactory.java',
            'org/springframework/http/client/SimpleClientHttpResponse.java',
            'org/springframework/http/client/StreamingSimpleClientHttpRequest.java',
            'org/springframework/http/client/support/HttpRequestWrapper.java',
            'org/springframework/http/client/support/InterceptingHttpAccessor.java',
            'org/springframework/http/converter/AbstractHttpMessageConverter.java',
            'org/springframework/http/converter/ByteArrayHttpMessageConverter.java',
            'org/springframework/http/converter/FormHttpMessageConverter.java',
            'org/springframework/http/converter/HttpMessageConversionException.java',
            'org/springframework/http/converter/HttpMessageConverter.java',
            'org/springframework/http/converter/HttpMessageNotReadableException.java',
            'org/springframework/http/converter/HttpMessageNotWritableException.java',
            'org/springframework/http/converter/StringHttpMessageConverter.java',
            'org/springframework/http/converter/json/MappingJacksonHttpMessageConverter.java',
            'org/springframework/http/converter/xml/AbstractXmlHttpMessageConverter.java',
            'org/springframework/http/converter/xml/SourceHttpMessageConverter.java',
            'org/springframework/http/converter/xml/XmlAwareFormHttpMessageConverter.java',
            'org/springframework/web/client/DefaultResponseErrorHandler.java',
            'org/springframework/web/client/HttpClientErrorException.java',
            'org/springframework/web/client/HttpMessageConverterExtractor.java',
            'org/springframework/web/client/HttpServerErrorException.java',
            'org/springframework/web/client/HttpStatusCodeException.java',
            'org/springframework/web/client/RequestCallback.java',
            'org/springframework/web/client/ResourceAccessException.java',
            'org/springframework/web/client/ResponseErrorHandler.java',
            'org/springframework/web/client/ResponseExtractor.java',
            'org/springframework/web/client/RestClientException.java',
            'org/springframework/web/client/RestOperations.java',
            'org/springframework/web/util/UriTemplate.java',
            'org/springframework/web/util/UriUtils.java'
            ]

        // loops through springframework jars, extracting and copying class files to the sharedSrcDir folder
        FileCollection sourceJars = configurations.explodedSourceFiles
        sourceJars.each { sourceJar ->
            zipTree(sourceJar).visit { sourceFile ->
                if (sourceFile.relativePath.toString() in sourceFilter) {
                    filePath = sourceFile.relativePath.getPathString().minus(sourceFile.name)
                    copy {
                        from sourceFile.file
                        into sharedSrcDir + '/' + filePath
                    }
                }
            }
        }
    }
}


// -----------------------------------------------------------------------------
// Configuration for the docs subproject
// -----------------------------------------------------------------------------
project('docs') {
    apply from: "$buildSrcDir/docs.gradle"
}

apply from: "$buildSrcDir/dist.gradle"
apply from: "$buildSrcDir/checks.gradle"